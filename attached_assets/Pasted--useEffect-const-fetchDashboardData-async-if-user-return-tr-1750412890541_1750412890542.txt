
  useEffect(() => {
    const fetchDashboardData = async () => {
      if (!user) return;

      try {
        const token = localStorage.getItem('token')

        // Fetch learning paths from backend
        const learningResponse = await fetch('/api/learning/paths', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })

        // Fetch job recommendations from backend
        const jobsResponse = await fetch('/api/jobs/recommendations', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })

        // Fetch dashboard stats
        const statsResponse = await fetch('/api/student/dashboard/stats', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })

        if (learningResponse.ok) {
          const learningData = await learningResponse.json()
          const formattedPaths = learningData.paths.map((path: any) => ({
            ...path,
            status: path.progress === 0 ? 'not_started' : 
                   path.progress === 100 ? 'completed' : 'in_progress'
          }))
          setLearningPaths(formattedPaths)

          // Calculate average progress
          const avgProgress = Math.round(
            formattedPaths.reduce((acc: number, path: any) => acc + path.progress, 0) / formattedPaths.length
          )
          setAverageProgress(avgProgress)
        }

        if (jobsResponse.ok) {
          const jobsData = await jobsResponse.json()
          const formattedJobs = jobsData.jobs.map((job: any) => ({
            ...job,
            type: job.title.toLowerCase().includes('intern') ? 'internship' : 'job'
          }))
          setJobRecommendations(formattedJobs)
        }

        if (statsResponse.ok) {
          const statsData = await statsResponse.json()
          setCareerScore(statsData.career_score)
          setAverageProgress(statsData.average_progress)
        }

        // Create activity logs from real user interactions
        const realActivityLogs: ActivityLog[] = [
          {
            id: '1',
            type: 'login',
            title: 'Login Activity',
            description: `Logged in at ${new Date().toLocaleTimeString()}`,
            timestamp: new Date(),
            icon: LogOut,
            color: 'text-blue-400'
          }
        ]
        setActivityLogs(realActivityLogs)

      } catch (error) {
        console.error('Error fetching dashboard data:', error)
